# Checks for usage of items through absolute paths, like std::env::current_dir.
[absolute_paths]
group = "restriction"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+absolute_paths"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/absolute_paths"
# Checks for usage of the #[allow] attribute and suggests replacing it with the #[expect]
[allow_attributes]
group = "restriction"
applicability = "machine-applicable"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+allow_attributes"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/allow_attributes"
# Checks for attributes that allow lints without a reason.
[allow_attributes_without_reason]
group = "restriction"
applicability = "machine-applicable"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+allow_attributes_without_reason"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/allow_attributes_without_reason"
# Checks for ranges which almost include the entire range of letters or digits.
[almost_complete_range]
group = "restriction"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+almost_complete_range"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/almost_complete_range"
# Checks for foo = bar; bar = foo sequences.
[almost_swaped]
group = "style"
applicability = "machine-applicable"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+almost_swaped"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/almost_swaped"
# 
Checks for floating point literals that approximate constants which are defined in std::f32::consts or std::f64::consts, respectively, suggesting to use the predefined constant.
[approx_constant]
group = "correctness"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+approx_constant"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/approx_constant"
# This lint warns when you use Arc with a type that does not implement Send or Sync.
[arc_with_non_send_sync]
group = "suspicious"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+arc_with_non_send_sync"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/arc_with_non_send_sync"
# Checks any kind of arithmetic operation of any type.
[arithmetic_side_effects]
group = "restriction"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+arithmetic_side_effects"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/arithmetic_side_effects"
# Checks for usage of as conversions.
[as_conversions]
group = "restriction"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+as_conversions"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/as_conversions"
# Checks for the result of a &self-taking as_ptr being cast to a mutable pointer.
[as_ptr_cast_mut]
group = "nursery"
applicability = "maybe-incorrect"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+as_ptr_cast_mut"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/as_ptr_cast_mut"
# Checks for usage of as underscore.
[as_underscore]
group = "restriction"
applicability = "machine-applicable"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+as_underscore"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/as_underscore"
# Checks for assert!(true) and assert!(false) calls.
[assertions_on_constants]
group = "style"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+assertions_on_constants"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/assertions_on_constants"
# Checks for a = a op b or a = b commutative_op a patterns.
[assign_op_pattern]
group = "style"
applicability = "machine-applicable"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+assign_op_pattern"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/assign_op_pattern"
# Checks for code like foo = bar.clone();
[assigning_clones]
group = "pedantic"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+assigning_clones"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/assigning_clones"
# Checks for async blocks that yield values of types that can themselves be awaited.
[async_yields_async]
group = "correctness"
applicability = "maybe-incorrect"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+async_yields_async"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/async_yields_async"
# Allows users to configure types which should not be held across await suspension points.
[await_holding_invalid_type]
group = "suspicious"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+await_holding_invalid_type"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/await_holding_invalid_type"
# Checks for calls to await while holding a non-async-aware MutexGuard.
[await_holding_lock]
group = "suspicious"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+await_holding_lock"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/await_holding_lock"
# Checks for the usage of the to_be_bytes method and/or the function from_be_bytes.
[big_endian_bytes]
group = "restriction"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+big_endian_bytes"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/big_endian_bytes"
# Checks for usage of _.and_then(|x| Some(y)), _.and_then(|x| Ok(y)) or _.or_else(|x| Err(y)).
[bind_instead_of_map]
group = "complexity"
applicability = "machine-applicable"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+bind_instead_of_map"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/bind_instead_of_map"
# Checks for warn/deny/forbid attributes targeting the whole restriction category.
[blanket_clippy_restriction_lints]
group = "suspicious"
applicability = "machine-applicable"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+blanket_clippy_restriction_lints"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/blanket_clippy_restriction_lints"
# 
Checks for if and match conditions that use blocks containing an expression, statements or conditions that use closures with blocks.
[blocks_in_conditions]
group = "style"
applicability = "machine-applicable"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+blocks_in_conditions"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/blocks_in_conditions"
# Checks for expressions of the form x == true, x != true and order comparisons such as x < true (or vice versa) and suggest using the variable directly.
[bool_comparison]
group = "complexity"
applicability = "machine-applicable"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+bool_comparison"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/bool_comparison"
# Instead of using an if statement to convert a bool to an int, this lint suggests using a from() function or an as coercion.
[bool_to_int_with_if]
group = "pedantic"
applicability = "maybe-incorrect"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+bool_to_int_with_if"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/bool_to_int_with_if"
# Checks for the usage of &expr as *const T or &mut expr as *mut T, and suggest using ptr::addr_of or ptr::addr_of_mut instead.
[borrow_as_ptr]
group = "pedantic"
applicability = "machine-applicable"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+borrow_as_ptr"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/borrow_as_ptr"
# Checks for &*(&T).
[borrow_deref_ref]
group = "complexity"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+borrow_deref_ref"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/borrow_deref_ref"
# Checks if const items which is interior mutable (e.g., contains a Cell, Mutex, AtomicXxxx, etc.) has been borrowed directly.
[borrow_interior_mutable_const]
group = "style"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+borrow_interior_mutable_const"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/borrow_interior_mutable_const"
# Checks for usage of &Box<T> anywhere in the code. Check the Box documentation for more information.
[borrowed_box]
group = "complexity"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+borrowed_box"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/borrowed_box"
# Checks for usage of Box<T> where T is a collection such as Vec anywhere in the code. Check the Box documentation for more information.
[box_collection]
group = "perf"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+box_collection"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/box_collection"
# Checks for comparing to an empty slice such as "" or [], and suggests using .is_empty() where applicable.
[comparison_to_empty]
group = "style"
applicability = "machine-applicable"
# allow < warn > deny
severity = "warn"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+comparison_to_empty"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/comparison_to_empty"
# It identifies calls to .is_empty() on constant values.
[const_is_empty]
group = "suspicious"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+const_is_empty"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/const_is_empty"
# Checks for types that implement Copy as well as Iterator.
[copy_iterator]
group = "pedantic"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+copy_iterator"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/copy_iterator"
# Warns if there is a better representation for a numeric literal.
[crate_in_macro_def]
group = "suspicious"
applicability = "machine-applicable"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+crate_in_macro_def"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/crate_in_macro_def"
# Checks usage of std::fs::create_dir and suggest using std::fs::create_dir_all instead.
[create_dir]
group = "restriction"
applicability = "maybe-incorrect"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+create_dir"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/create_dir"
# Checks for transmutes between a type T and *T.
[crosspointer_transmute]
group = "complexity"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+crosspointer_transmute"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/crosspointer_transmute"
# Checks for usage of the dbg! macro.
[dbg_macro]
group = "perf"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+dbg_macro"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/dbg_macro"
# Checks for function/method calls with a mutable parameter in debug_assert!, debug_assert_eq! and debug_assert_ne! macros.
[debug_debug_assert_with_mut_call]
group = "complexity"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+debug_debug_assert_with_mut_call"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/debug_debug_assert_with_mut_call"
# Warns if there is a better representation for a numeric literal.
[decimal_literal_representation]
group = "restriction"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+decimal_literal_representation"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/decimal_literal_representation"
# Checks for declaration of const items which is interior mutable (e.g., contains a Cell, Mutex, AtomicXxxx, etc.).
[declare_interior_mutable_const]
group = "style"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+declare_interior_mutable_const"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/declare_interior_mutable_const"
# Checks for Mutex::lock calls in if let expression with lock calls in any of the else blocks.
[if_let_mutex]
group = "correctness"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+if_let_mutex"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/if_let_mutex"
# Checks for let-bindings, which are subsequently returned.
[let_and_return]
group = "restriction"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+let_and_return"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/let_and_return"
# Detects when a variable is declared with an explicit type of _.
[let_underscore_untyped]
group = "correctness"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+let_underscore_untyped"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/let_underscore_untyped"
# Detects when a variable is declared with an explicit type of _.
[let_with_type_underscore]
group = "correctness"
applicability = "unspecified"
# allow warn < deny > none
severity = "deny"
issue = "https://github.com/rust-lang/rust-clippy/issues?q=is%3Aissue+let_with_type_underscore"
info = "https://rust-lang.github.io/rust-clippy/master/index.html#/let_with_type_underscore"
